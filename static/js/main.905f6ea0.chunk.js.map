{"version":3,"sources":["store/actions/commonActions.js","store/reducers/commonReducer.js","store/reducers/boardReducers.js","store/actions/boardAction.js","containers/NewListOrCard/NewListOrCard.js","containers/Board/MyBoardView.js","components/TaskMirror/HorizontalPane/HorizontalPane.js","containers/MainComponent/MainComponent.js","components/UI/Backdrop/Backdrop.js","components/UI/Spinner/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["getAxiosCallError","createAction","commonReducer","handleActions","combineActions","state","action","payload","response","error","loading","successMessage","statusCode","status","loadingRequestCount","errorMessage","boardReducer","BOARD_RESET_STATE","BOARD_ADDLIST_STATE","newList","id","listTilte","cards","data","BOARD_ADDCARD_STATE","targetList","find","item","listId","window","console","log","newCard","cardTitle","cardDes","map","BOARD_CLEAR_STATE","mock","require","axios","delayResponse","boardResetState","boardAddListState","boardAddCardState","clearBoardState","responses","localStorage","getItem","onAny","reply","config","shift","method","url","toUpperCase","NewListOrCard","visible","showModal","setState","handleOk","e","handleCancel","handleSubmit","preventDefault","props","form","validateFields","err","values","itemType","addNewCard","title","des","addNewList","resetFields","getFieldDecorator","this","descForm","Item","rules","required","message","TextArea","rows","placeholder","type","size","icon","style","margin","onClick","onCancel","footer","onSubmit","gutter","span","marginRight","htmlType","Component","WrappedNewListOrCard","Form","create","connect","boardData","board","dispatch","listTitle","uuid","post","then","catch","actions","reorderArray","list","startIndex","endIndex","futureArray","Array","from","splice","removed","getItemStyle","isDragging","draggableStyle","userSelect","padding","grid","background","getCildListStyle","isDraggingOver","width","minHeight","border","wordWrap","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","result","droppableId","MyBoardView","getCardsArrayOfAList","element","onDragListEnd","items","reorderCurrList","onDragEndHandler","onCardDragEnd","cardsArray","reorderedList","destinationList","newResult","reorderedList1","reorderedList2","onDragEnd","direction","provided","snapshot","ref","innerRef","display","overflow","key","draggableId","draggableProps","dragHandleProps","childProvided","childSnapshot","Fragment","childItem","childIndex","content","trigger","nextListStatus","Promise","resolve","SubMenu","Menu","HorizontalPane","current","handleClick","theme","selectedKeys","mode","clearBoardData","React","Content","Layout","Header","MainComponent","Footer","Sider","renderWhenLoggedIn","backgroundColor","height","exact","to","path","component","backdrop","show","styleName","spinner","tip","App","prevProps","notification","location","href","clear","messageDict","JSON","parse","error_message","Object","keys","global","Boolean","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","history","createBrowserHistory","store","createStore","combineReducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0ZAEaA,EAAoBC,YAAa,0BCyC/BC,EA3BOC,YAAc,eAGjCC,YAAeJ,IAHiB,SAGGK,EAAOC,GAC1C,OAAIA,EAAOC,QAAQC,SACX,eACHH,EADJ,CAECI,OAAO,EACPC,SAAS,EACTC,eAAgB,KAChBC,WAAYN,EAAOC,QAAQC,SAASK,SAG9B,eACHR,EADJ,CAECI,OAAO,EAEPC,SAAS,EACTE,WAAY,KACZD,eAAgB,UA3BD,CACnBD,SAAS,EACTD,OAAO,EACPK,oBAAqB,EACrBC,aAAc,KACdJ,eAAgB,O,SCiEFK,EAtCMb,YACpB,CACCc,kBAAmB,SAACZ,EAAOC,GAC1B,OAAO,eAAKD,EAAZ,GAAsBC,EAAOC,UAE9BW,oBAAqB,SAACb,EAAOC,GAC5B,IAAIa,EAAU,CACbC,GAAId,EAAOC,QAAQa,GACnBC,UAAWf,EAAOC,QAAQc,UAC1BC,MAAO,IAIR,MAAO,CAAEC,KAAK,GAAD,mBAAMlB,EAAMkB,MAAZ,CAAkBJ,MAEhCK,oBAAqB,SAACnB,EAAOC,GAC5B,IAAImB,EAAapB,EAAMkB,KAAKG,MAAK,SAAAC,GAAI,OAAIA,EAAKP,KAAOd,EAAOC,QAAQqB,UAEpE,GADAC,OAAOC,QAAQC,IAAIN,EAAY,SAAUnB,GACtCmB,EAAW,CACb,IAAIO,EAAU,CACbZ,GAAGd,EAAOC,QAAQa,GAClBa,UAAW3B,EAAOC,QAAQ0B,UAC1BC,QAAS5B,EAAOC,QAAQ2B,SAIzB,OADAT,EAAWH,MAAX,sBAAuBG,EAAWH,OAAlC,CAAyCU,IAClC,CAAET,KAAMlB,EAAMkB,KAAKY,KAAI,SAAAR,GAAI,OAAIA,EAAKP,KAAOd,EAAOC,QAAQqB,OAASH,EAAaE,QAKzFS,kBAAmB,WAClB,MAAO,CAACb,KAAO,MAtEJ,CAEbA,KAAM,CAAC,CACNH,GAAI,uCACJC,UAAW,OACXC,MAAO,CAAC,CACPF,GAAI,uCACJa,UAAW,aACXC,QAAS,2BAGV,CACCd,GAAI,uCACJa,UAAW,WACXC,QAAS,oBAGX,CACCd,GAAI,uCACJC,UAAW,WACXC,MAAO,CAAC,CACPF,GAAI,uCACJa,UAAW,UACXC,QAAS,gBAGV,CACCd,GAAI,uCACJa,UAAW,YACXC,QAAS,2B,yJCxBRG,EAAO,IADOC,EAAQ,KACf,CAAgBC,IAAO,CAAEC,cAAe,MAEtCC,GADgBxC,YAAa,mBACXA,YAAa,sBAC/ByC,EAAoBzC,YAAa,uBACjC0C,EAAoB1C,YAAa,uBACjC2C,EAAkB3C,YAAa,qBAatC4C,GAPqBhB,OAAOiB,aAAaC,QAC9C,yBAEKlB,OAAOiB,aAAaC,QACzB,wBAGiB,CACjB,CAAC,MAAQ,cAAe,IAAK,CAAExB,KAAM,KACrC,CAAC,OAAQ,kBAAmB,KAC5B,CAAC,OAAQ,kBAAmB,KAC5B,CAAC,OAAQ,gBAAiB,OAK3Bc,EAAKW,QAAQC,OAAM,SAAAC,GAAW,IAAD,EACOL,EAAUM,QADjB,iBACrBC,EADqB,KACbC,EADa,KACL7C,EADK,WAE5B,OAAI0C,EAAOG,MAAQA,GAAOH,EAAOE,OAAOE,gBAAkBF,EAAe5C,EAElE,CAAC,IAAK,OAIP,I,8DCrCD+C,E,2MACJlD,MAAQ,CAAEmD,SAAS,G,EAEnBC,UAAY,WACV,EAAKC,SAAS,CACZF,SAAS,K,EAIbG,SAAW,SAAAC,GACT9B,QAAQC,IAAI6B,GACZ,EAAKF,SAAS,CACZF,SAAS,K,EAIbK,aAAe,SAAAD,GACb9B,QAAQC,IAAI6B,GACZ,EAAKF,SAAS,CACZF,SAAS,K,EAGbM,aAAe,SAAAF,GAEbA,EAAEG,iBACF,EAAKC,MAAMC,KAAKC,gBAAe,SAACC,EAAKC,GACnCvC,OAAOC,QAAQC,IAAIqC,EAAQ,OACtBD,IACHrC,QAAQC,IAAI,4BAA6BqC,GACjB,SAAxB,EAAKJ,MAAMK,SAAsB,EAAKL,MAAMM,WAAWF,EAAOG,MAAOH,EAAOI,IAAK,EAAKR,MAAMpC,QAAU,EAAKoC,MAAMS,WAAWL,EAAOG,MAAOH,EAAOI,KACjJ,EAAKd,SAAS,CAAEF,SAAS,QAG7B,EAAKQ,MAAMC,KAAKS,e,wEAGR,IAAD,OACCC,EAAsBC,KAAKZ,MAAMC,KAAjCU,kBACJE,EACsB,SAAxBD,KAAKZ,MAAMK,SACT,kBAAC,IAAKS,KAAN,KACGH,EAAkB,MAAO,CACxBI,MAAO,CAAC,CAAEC,UAAU,EAAOC,QAAS,+BADrCN,CAEE,kBAAC,IAAMO,SAAP,CAAgBC,KAAM,EAAGC,YAAY,kBAG1C,GAGJ,OACE,6BACA,gCACE,kBAAC,IAAD,CACEC,KAAK,UACLC,KAAK,UACLC,KAAK,cACLC,MAAO,CAACC,OAAQ,QAEhBC,QAASd,KAAKnB,WANhB,kBAQcmB,KAAKZ,MAAMK,YAGzB,kBAAC,IAAD,CACEE,MAAK,cAASK,KAAKZ,MAAMK,UACzBb,QAASoB,KAAKvE,MAAMmD,QACpBmC,SAAU,kBAAM,EAAKjC,SAAS,CAAEF,SAAS,KACzCoC,OAAQ,MAER,kBAAC,IAAD,CAAMC,SAAUjB,KAAKd,cACnB,kBAAC,IAAKgB,KAAN,KACGH,EAAkB,QAAS,CAC1BI,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,wBADpCN,CAEE,kBAAC,IAAD,CAAOS,YAAY,YAEvBP,EAED,kBAAC,IAAKC,KAAN,KACE,kBAAC,IAAD,CAAKgB,OAAQ,CAAC,EAAG,IACf,kBAAC,IAAD,CAAKC,KAAM,KACX,kBAAC,IAAD,CAAKA,KAAM,EAAGP,MAAO,CAAEQ,YAAa,MAClC,kBAAC,IAAD,CACEX,KAAK,UACLK,QAAS,kBAAM,EAAKhC,SAAS,CAAEF,SAAS,MAF1C,WAOF,kBAAC,IAAD,CAAKuC,KAAM,GACT,kBAAC,IAAD,CAAQV,KAAK,UAAUY,SAAS,UAAhC,iB,GAzFUC,aAoHtBC,EAAuBC,IAAKC,QAALD,CAAc7C,GAE5B+C,eAhBS,SAAAjG,GACtB,MAAO,CACLkG,UAAWlG,EAAMmG,MAAMjF,SAIA,SAAAkF,GACzB,MAAO,CACLhC,WAAY,SAAAiC,GAAS,OAAID,ED/DH,SAACpF,GAA0B,IAAfD,EAAc,uDAAXuF,iBACxC,OAAO,SAAAF,GAGNlE,IAAMqE,KADC,mBAELC,MAAK,SAAArG,GACLiG,EAAS/D,EAAkB,CAACrB,UAAUA,EAAWD,GAAGA,QAGpD0F,OAAM,SAAA3C,GACNsC,EAAS/D,EAAkB,CAACrB,UAAUA,EAAWD,GAAGA,SCqDlB2F,CAAmBL,KACrDpC,WAAY,SAACrC,EAAWC,EAASN,GAArB,OAAiC6E,EDjDvB,SAACxE,EAAWC,EAASN,GAAuB,IAAfR,EAAc,uDAAXuF,iBACzD,OAAO,SAAAF,GACN5E,OAAOC,QAAQC,IAAI,iBAAkBE,EAAWC,EAASN,GAGzDW,IAAMqE,KADC,mBAELC,MAAK,SAAArG,GACLqB,OAAOC,QAAQC,IAAI,qBAAsBE,EAAWC,EAASN,GAC7D6E,EAAS9D,EAAkB,CAACV,UAAUA,EAAWC,QAASA,EAASN,OAAQA,EAASR,GAAGA,QAGvF0F,OAAM,SAAA3C,GACNsC,EAAS9D,EAAkB,CAACV,UAAUA,EAAWC,QAASA,EAASN,OAAQA,EAASR,GAAGA,KACvFqF,EAASzG,EAAkBmE,QCoC2B4C,CAAmB9E,EAAWC,EAASN,QAOlF0E,CAGbH,GCrHIa,G,OAAe,SAACC,EAAMC,EAAYC,GACtC,IAAMC,EAAcC,MAAMC,KAAKL,GADoB,EAEjCG,EAAYG,OAAOL,EAAY,GAA1CM,EAF4C,oBAKnD,OAFAJ,EAAYG,OAAOJ,EAAU,EAAGK,GAEzBJ,IAKHK,EAAe,SAACC,EAAYC,GAAb,oBACnBC,WAAY,OACZC,QAASC,GACTrC,OAAO,OAAD,OALK,GAKL,QAENsC,WAAYL,EAAa,aAAe,SAErCC,IAYCK,GAAmB,SAAAC,GAAc,MAAK,CAC1CF,WAAYE,EAAiB,QAAU,YACvCJ,QAvBW,GAwBXK,MAAO,IACPC,UAAW,IACXC,OAAQ,cACRC,SAAU,eAGNC,GAAO,SAACC,EAAQC,EAAaC,EAAiBC,GAClD,IAAMC,EAActB,MAAMC,KAAKiB,GACzBK,EAAYvB,MAAMC,KAAKkB,GAF8C,EAGzDG,EAAYpB,OAAOkB,EAAgBI,MAAO,GAArDrB,EAHoE,oBAK3EoB,EAAUrB,OAAOmB,EAAqBG,MAAO,EAAGrB,GAEhD,IAAMsB,EAAS,GAIf,OAHAA,EAAOL,EAAgBM,aAAeJ,EACtCG,EAAOJ,EAAqBK,aAAeH,EAEpCE,GAGHE,G,2MACJ3I,MAAQ,G,EAER4I,qBAAuB,SAAA7H,GAAE,OACvB,EAAK4C,MAAMuC,UAAU7E,MAAK,SAAAwH,GAAO,OAAIA,EAAQ9H,KAAOA,M,EAEtD+H,cAAgB,SAAAL,GACdjH,OAAOC,QAAQC,IAAI+G,EAAQ,OADH,IAEhBP,EAAwBO,EAAxBP,OAAQC,EAAgBM,EAAhBN,YAEhB,GAAKA,GAEDD,EAAOQ,cAAgBP,EAAYO,YAAa,CAClD,IAAMK,EAAQpC,EACZ,EAAKhD,MAAMuC,UACXgC,EAAOM,MACPL,EAAYK,OAEd,EAAK7E,MAAMqF,gBAAgBD,K,EAI/BE,iBAAmB,SAAAR,GACjBjH,OAAOC,QAAQC,IAAI+G,EAAQ,QADA,IAEnBN,EAAsBM,EAAtBN,YAAanD,EAASyD,EAATzD,KAChBmD,IAGQ,SAATnD,EACF,EAAKkE,cAAcT,GACD,SAATzD,GACT,EAAK8D,cAAcL,K,EAIvBS,cAAgB,SAAAT,GAAW,IACjBP,EAAwBO,EAAxBP,OAAQC,EAAgBM,EAAhBN,YAIhB,GAHA3G,OAAOC,QAAQC,IAAI+G,GAGdN,EAIL,GAAID,EAAOQ,cAAgBP,EAAYO,YAAa,CAClDlH,OAAOC,QAAQC,IAAI,EAAKkH,qBAAqBV,EAAOQ,cACpD,IAAItH,EAAa,EAAKwH,qBAAqBV,EAAOQ,aAC5CS,EAAaxC,EACjB,EAAKiC,qBAAqBV,EAAOQ,aAC7B,EAAKE,qBAAqBV,EAAOQ,aAAazH,MAC9C,GACJiH,EAAOM,MACPL,EAAYK,OAEVY,EAAa,eAAQhI,EAAR,CAAoBH,MAAOkI,IAE5C,EAAKxF,MAAMqF,gBACT,EAAKrF,MAAMuC,UAAUpE,KAAI,SAAAR,GAAI,OAC3BA,EAAKP,KAAOmH,EAAOQ,YAAcU,EAAgB9H,UAGhD,CACL,IAAIF,EAAa,EAAKwH,qBAAqBV,EAAOQ,aAC9CW,EAAkB,EAAKT,qBAAqBT,EAAYO,aACtDY,EAAYrB,GAChB7G,EAAWH,MACXoI,EAAgBpI,MAChBiH,EACAC,GAEEoB,EAAc,eACbnI,EADa,CAEhBH,MAAOqI,EAAU,GAAD,OAAIpB,EAAOQ,gBAEzBc,EAAc,eACbH,EADa,CAEhBpI,MAAOqI,EAAU,GAAD,OAAInB,EAAYO,gBAGlC,EAAK/E,MAAMqF,gBACT,EAAKrF,MAAMuC,UAAUpE,KAAI,SAAAR,GACvB,OAAIA,EAAKP,KAAOmH,EAAOQ,YAAoBa,EACvCjI,EAAKP,KAAOoH,EAAYO,YAAoBc,EACzClI,Q,wEAML,IAAD,OACP,OACE,6BACE,kBAAC,IAAD,CAAiBmI,UAAWlF,KAAK0E,kBAC/B,kBAAC,IAAD,CAAWP,YAAY,YAAYgB,UAAU,aAAa1E,KAAK,SAC5D,SAAC2E,EAAUC,GAAX,OACC,yBACEC,IAAKF,EAASG,SACd3E,OAjIKyC,EAiIegC,EAAShC,eAjIL,CACtCF,WAAYE,EAAiB,QAAU,aACvCJ,QAdW,GAgBXuC,QAAS,OAETC,SAAU,UA6HK,EAAKrG,MAAMuC,UAAUpE,KAAI,SAACR,EAAMkH,GAAP,OACxB,kBAAC,IAAD,CAAWyB,IAAK3I,EAAKP,GAAImJ,YAAa5I,EAAKP,GAAIyH,MAAOA,IACnD,SAACmB,EAAUC,GAAX,OACC,uCACEC,IAAKF,EAASG,UACVH,EAASQ,eACTR,EAASS,gBAHf,CAIEjF,MAAOiC,EACLwC,EAASvC,WACTsC,EAASQ,eAAehF,SAI1B,kBAAC,IAAD,CAAWuD,YAAapH,EAAKP,GAAIiE,KAAK,SACnC,SAACqF,EAAeC,GAAhB,OACC,kBAAC,IAAMC,SAAP,KACE,yBACEV,IAAKQ,EAAcP,SACnB3E,MAAOwC,GACL2C,EAAc1C,iBAGhB,8BACE,gCAAStG,EAAKN,YAEfM,EAAKL,MAAMa,KAAI,SAAC0I,EAAWC,GAAZ,OACd,kBAAC,IAAD,CACER,IAAKO,EAAUzJ,GACfmJ,YAAaM,EAAUzJ,GACvByH,MAAOiC,IAEN,SAACJ,EAAeC,GAAhB,OACC,kBAAC,IAAD,CACEI,QAASF,EAAU3I,QACnBqC,MAAOsG,EAAU5I,UACjB+I,QAAQ,SAER,uCACEd,IAAKQ,EAAcP,UACfO,EAAcF,eACdE,EAAcD,gBAHpB,CAIEjF,MAAOiC,EACLkD,EAAcjD,WACdgD,EAAcF,eAAehF,SAG/B,8BACE,gCACGqF,EAAU5I,oBAQxB+H,EAAS5E,aAEZ,kBAAC,EAAD,CACEf,SAAS,OACTzC,OAAQD,EAAKP,gBAU5B4I,EAAS5E,YACV,kBAAC,EAAD,CAAef,SAAS,UA1MnB,IAAA4D,W,GAgCK/B,aAkMXI,gBAdS,SAAAjG,GACtB,MAAO,CACLkG,UAAWlG,EAAMmG,MAAMjF,SAIA,SAAAkF,GACzB,MAAO,CACL4C,gBAAiB,SAAA9C,GAAS,OAAIE,GF/MFwE,EE+MmC1E,EF9M3D,SAAAE,GAIN,OAHAA,EAAShE,EAAgB,CACxBlB,KAAM0J,KAEAC,QAAQC,aALc,IAACF,MEqNjB3E,CAA6C0C,I,kBC1PtDoC,GAAUC,KAAKD,QAEfE,G,2MAELjL,MAAQ,CACPkL,QAAS,Q,EAEVC,YAAc,SAAA5H,GACb,EAAKF,SAAS,CACb6H,QAAS3H,EAAE0G,O,wEAIH,IAAD,OACR,OACC,6BACC,kBAAC,KAAD,CAECmB,MAAM,OACN/F,QAASd,KAAK4G,YACdE,aAAc,CAAC9G,KAAKvE,MAAMkL,SAC1BI,KAAK,cAKL,kBAACP,GAAD,CAAS7G,MAAO,8BAAM,kBAAC,KAAD,CAAMc,KAAK,SAAjB,iBAIhB,kBAAC+F,GAAD,CAAS7G,MAAO,0BAAMmB,QAAS,kBAAM,EAAK1B,MAAM4H,mBAAkB,kBAAC,KAAD,CAAMvG,KAAK,WAA7D,uB,GA5BQwG,IAAM3F,WAuDlBI,gBAdO,SAAAjG,GACvB,MAAO,CACLkG,UAAWlG,EAAMmG,MAAMjF,SAIG,SAAAkF,GAC5B,MAAO,CACLmF,eAAgB,kBAAMnF,GH6BjB,SAAAA,GAGNlE,IAAMqE,KADC,iBAELC,MAAK,SAAArG,GACLiG,EAAS7D,QAGTkE,OAAM,SAAA3C,GACNsC,EAAS7D,KAET6D,EAASzG,EAAkBmE,cGlCdmC,CAA6CgF,IClD9CQ,I,OAA2BC,IAAnCC,OAAmCD,IAA3BD,SAEVG,IAFqCF,IAAlBG,OAAkBH,IAAVI,M,iLAK3B,OAAOvH,KAAKwH,uB,2CAKd,OACE,kBAAC,IAAMxB,SAAP,KACE,kBAAC,IAAD,KACE,kBAAC,GAAD,MAEA,kBAAC,IAAD,KACE,kBAACkB,GAAD,CAAStG,MAAO,CAAE6G,gBAAiB,aAAcC,OAAQ,UACvD,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUC,OAAK,EAACjF,KAAK,IAAIkF,GAAG,YAC5B,kBAAC,IAAD,CAAUD,OAAK,EAACjF,KAAK,SAASkF,GAAG,YAEjC,kBAAC,IAAD,CAAOC,KAAK,UAAUF,OAAK,EAACG,UAAW1D,c,GAnB3B9C,cAuCbI,gBAVS,SAAAjG,GACtB,MAAO,MAGkB,SAAAoG,GACzB,MAAO,KAKMH,CAA6C2F,ICnC7CU,I,OAbE,SAAC3I,GAChB,OACAA,EAAM4I,KAAO,yBAAKC,UAAU,aAAqB,O,UCMpCC,I,OARC,kBACR,6BACI,kBAAC,GAAD,CAAUF,MAAM,IAChB,yBAAKC,UAAU,WAAU,kBAAC,KAAD,CAAOE,IAAM,aAAazH,KAAO,cCGhE0H,I,kMACcC,GAMlB,GALIrI,KAAKZ,MAAMrD,gBAAkBiE,KAAKZ,MAAMrD,iBAAmBsM,EAAUtM,gBACxEuM,IAAY,QAAY,CACvBjI,QAASL,KAAKZ,MAAMrD,iBAGlBiE,KAAKZ,MAAMvD,OAASmE,KAAKZ,MAAMvD,QAAUwM,EAAUxM,MACtD,GAA0B,MAAtBmE,KAAKZ,MAAMnD,OACdgB,OAAOsL,SAASC,KAAO,UACvBvL,OAAOiB,aAAauK,YACd,CACN,IAAIC,EAAc,KAClB,IACCA,EAAcC,KAAKC,MAAM5I,KAAKZ,MAAMyJ,eACnC,MAAO7J,GACR0J,EAAc,KAEfA,EACGI,OAAOC,KAAKL,GAAanL,KAAI,SAAAmI,GAAG,OAAIrF,IAAQxE,MAAR,UAAiB6J,EAAjB,cAA0BgD,EAAYhD,QAC1ErF,IAAQxE,MAAM,sB,+BAKnB,IAAIqM,EAAU,KAKd,OAHIlI,KAAKZ,MAAMtD,SAAWkE,KAAKZ,MAAMlD,oBAAsB,KAC1DgM,EAAU,kBAAC,GAAD,OAGV,yBAAKD,UAAU,OACd,kBAAC,IAAD,KACC,6BACC,kBAAC,GAAD,MACCC,S,GAnCW5G,cAiEHI,gBAtBS,SAAAjG,GACvB,MAAO,CACNK,QAASL,EAAMuN,OAAOlN,QACtBI,oBAAqBT,EAAMuN,OAAO9M,oBAClCL,MAAOJ,EAAMuN,OAAOnN,MACpBgN,cAAepN,EAAMuN,OAAO7M,aAC5BJ,eAAgBN,EAAMuN,OAAOjN,eAC7BE,OAAQR,EAAMuN,OAAOhN,cAeR0F,CAAyB0G,IChEpBa,QACW,cAA7BhM,OAAOsL,SAASW,UAEe,UAA7BjM,OAAOsL,SAASW,UAEhBjM,OAAOsL,SAASW,SAASC,MACvB,2DCEN,IAAMC,GAAmBnM,OAAOoM,sCAAwCC,IAClEC,GAAUC,cAEVC,GAAQC,YACZC,YAAgB,CAEdX,OAAQ1N,EACVsG,MAAOxF,IAIPgN,GAAiBQ,YAAgBC,OAInCC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUN,MAAOA,IACf,kBAAC,GAAD,CAAKF,QAASA,OAGlBS,SAASC,eAAe,SDwFpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnI,MAAK,SAAAoI,GACjCA,EAAaC,kB","file":"static/js/main.905f6ea0.chunk.js","sourcesContent":["import {createAction} from \"redux-actions\";\n\nexport const getAxiosCallError = createAction('AXIOS_GETREQUEST_ERROR')","import { handleActions, combineActions } from \"redux-actions\";\n\nimport {\n\tgetAxiosCallError,\n\n} from \"../actions/commonActions\";\n\n\nconst commonstate = {\n\tloading: false,\n\terror: false,\n\tloadingRequestCount: 0,\n\terrorMessage: null,\n\tsuccessMessage: null\n};\n\nconst commonReducer = handleActions(\n\t{\n\t\t\n\t\t[combineActions(getAxiosCallError)](state, action) {\n\t\t\tif (action.payload.response) {\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\terror: true,\n\t\t\t\t\tloading: false,\n\t\t\t\t\tsuccessMessage: null,\n\t\t\t\t\tstatusCode: action.payload.response.status\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\terror: true,\n\t\t\t\t\t\n\t\t\t\t\tloading: false,\n\t\t\t\t\tstatusCode: null,\n\t\t\t\t\tsuccessMessage: null\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t},\n\tcommonstate\n);\n\nexport default commonReducer;\n","import { handleActions } from \"redux-actions\";\n\nconst board = {\n\n\tdata: [{\n\t\tid: \"1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed\",\n\t\tlistTilte: \"TODO\",\n\t\tcards: [{\n\t\t\tid: \"1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4eed\",\n\t\t\tcardTitle: \"Book Hotel\",\n\t\t\tcardDes: \"Don't sleep on footpath\",\n\n\t\t},\n\t\t{\n\t\t\tid: \"1b9d6bcd-bbfd-4b2d-9b5d-ab8dfdbd4eed\",\n\t\t\tcardTitle: \"Book Bus\",\n\t\t\tcardDes: \"Can't Hire Cab\",\n\t\t}]\n\t},\n\t{\n\t\tid: \"1b9b6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed\",\n\t\tlistTilte: \"PROGRESS\",\n\t\tcards: [{\n\t\t\tid: \"1b8d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4eed\",\n\t\t\tcardTitle: \"Meeting\",\n\t\t\tcardDes: \"Goto Meeting\",\n\n\t\t},\n\t\t{\n\t\t\tid: \"1b9d7bcd-bbfd-4b2d-9b5d-ab8dfdbd4eed\",\n\t\t\tcardTitle: \"Read Book\",\n\t\t\tcardDes: \"Continous Learning\",\n\t\t}]\n\t}\n\n\n\n\t]\n}\n\nconst boardReducer = handleActions(\n\t{\n\t\tBOARD_RESET_STATE: (state, action) => {\n\t\t\treturn { ...state, ...action.payload }\n\t\t},\n\t\tBOARD_ADDLIST_STATE: (state, action) => {\n\t\t\tlet newList = {\n\t\t\t\tid: action.payload.id,\n\t\t\t\tlistTilte: action.payload.listTilte,\n\t\t\t\tcards: []\n\t\t\t}\n\t\t\t// window.console.log(newList)\n\n\t\t\treturn { data: [...state.data, newList] }\n\t\t},\n\t\tBOARD_ADDCARD_STATE: (state, action) => {\n\t\t\tlet targetList = state.data.find(item => item.id === action.payload.listId)\n\t\t\twindow.console.log(targetList, \"dasdas\", action)\n\t\t\tif(targetList){\n\t\t\t\tlet newCard = {\n\t\t\t\t\tid:action.payload.id,\n\t\t\t\t\tcardTitle: action.payload.cardTitle,\n\t\t\t\t\tcardDes: action.payload.cardDes\n\n\t\t\t\t}\n\t\t\t\ttargetList.cards = [...targetList.cards, newCard]\n\t\t\t\treturn { data: state.data.map(item => item.id === action.payload.listId ? targetList : item ) }\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t},\n\t\tBOARD_CLEAR_STATE: () => {\n\t\t\treturn {data : []}\n\t\t}\n\t},\n\tboard\n);\n\nexport default boardReducer;","import { createAction } from \"redux-actions\";\nimport { getAxiosCallError, getAxiosCallRequest, getAxiosCallSuccess } from \"./commonActions.js\";\nimport { uuid } from 'uuidv4';\nimport axios from \"axios\";\n\n\nlet MockAdapter = require('axios-mock-adapter');\nlet mock = new MockAdapter(axios, { delayResponse: 200 });\nexport const boardSetState = createAction(\"BOARD_SET_STATE\")\nexport const boardResetState = createAction(\"BOARD_RESET_STATE\")\nexport const boardAddListState = createAction(\"BOARD_ADDLIST_STATE\")\nexport const boardAddCardState = createAction(\"BOARD_ADDCARD_STATE\")\nexport const clearBoardState = createAction(\"BOARD_CLEAR_STATE\")\n\n// window.localStorage.setItem(\n// \t\"my-task-mirror-data\",\n\t\n//   );\nlet storedTaskMirrorData = window.localStorage.getItem(\n\t\"my-task-mirror-state\"\n\t\n  ) ? window.localStorage.getItem(\n\t\"my-task-mirror-state\"): \"\"\n\n// window.console.log(JSON.parse(storedTaskMirrorData))\nconst responses = [\n\t['GET',  '/board/data', 200, { data: []}],\n\t['POST', '/board/list/add', 200],\n\t['POST', '/board/card/add', 200],\n\t['POST', '/board/delete', 200],\n\t\n  ];\n\n// Match ALL requests\nmock.onAny().reply(config => {\n\tconst [method, url, ...response] = responses.shift();\n\tif (config.url === url && config.method.toUpperCase() === method) return response;\n\t// Unexpected request, error out\n\treturn [200, {}];\n  });\n\n\nexport const reorderCurrList = (nextListStatus) => {\n\treturn dispatch => {\n\t\tdispatch(boardResetState({\n\t\t\tdata: nextListStatus\n\t\t}))\n\t\treturn Promise.resolve()\n\t}\n}\n\n\nexport const addNewList = (listTilte, id=uuid()) => {\n\treturn dispatch => {\n\t\t\n\t\tlet url = `/board/list/add`\n\t\taxios.post(url)\n\t\t\t.then(response => {\n\t\t\t\tdispatch(boardAddListState({listTilte:listTilte, id:id}))\n\t\t\t\t\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tdispatch(boardAddListState({listTilte:listTilte, id:id}))\n\t\t\t});\n\t};\n}\n\nexport const addNewCard = (cardTitle, cardDes, listId, id=uuid()) => {\n\treturn dispatch => {\n\t\twindow.console.log(\"comming addNew\", cardTitle, cardDes, listId)\n\t\t\n\t\tlet url = `/board/card/add`\n\t\taxios.post(url)\n\t\t\t.then(response => {\n\t\t\t\twindow.console.log(\"comming res addNew\", cardTitle, cardDes, listId)\n\t\t\t\tdispatch(boardAddCardState({cardTitle:cardTitle, cardDes: cardDes, listId: listId,  id:id}))\n\t\t\t\t\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tdispatch(boardAddCardState({cardTitle:cardTitle, cardDes: cardDes, listId: listId,  id:id}))\n\t\t\t\tdispatch(getAxiosCallError(err));\n\t\t\t});\n\t};\n}\nexport const clearBoardData = () => {\n\treturn dispatch => {\n\t\t\n\t\tlet url = `/board/delete`\n\t\taxios.post(url)\n\t\t\t.then(response => {\n\t\t\t\tdispatch(clearBoardState())\n\t\t\t\t\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tdispatch(clearBoardState())\n\t\t\t\t\n\t\t\t\tdispatch(getAxiosCallError(err));\n\t\t\t});\n\t};\n}\n\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../store/actions\";\nimport { Modal, Button, Input, Form, Icon, Checkbox, Row, Col } from \"antd\";\n\nclass NewListOrCard extends Component {\n  state = { visible: false };\n\n  showModal = () => {\n    this.setState({\n      visible: true\n    });\n  };\n\n  handleOk = e => {\n    console.log(e);\n    this.setState({\n      visible: false\n    });\n  };\n\n  handleCancel = e => {\n    console.log(e);\n    this.setState({\n      visible: false\n    });\n  };\n  handleSubmit = e => {\n  \n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      window.console.log(values, \"lll\");\n      if (!err) {\n        console.log(\"Received values of form: \", values);\n        this.props.itemType === \"Card\" ? this.props.addNewCard(values.title, values.des, this.props.listId) : this.props.addNewList(values.title, values.des);\n        this.setState({ visible: false });\n      }\n    });\n    this.props.form.resetFields();\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    let descForm =\n      this.props.itemType === \"Card\" ? (\n        <Form.Item>\n          {getFieldDecorator(\"des\", {\n            rules: [{ required: false, message: \"Please input Description!\" }]\n          })(<Input.TextArea rows={2} placeholder=\"Description\" />)}\n        </Form.Item>\n      ) : (\n        \"\"\n      );\n\n    return (\n      <div>\n      <center>\n        <Button\n          type=\"primary\"\n          size=\"default\"\n          icon=\"plus-circle\"\n          style={{margin: \"10px\"}}\n         \n          onClick={this.showModal}\n        >\n          {`Add New ${this.props.itemType}`}\n        </Button>\n        </center>\n        <Modal\n          title={`Add ${this.props.itemType}`}\n          visible={this.state.visible}\n          onCancel={() => this.setState({ visible: false })}\n          footer={null}\n        >\n          <Form onSubmit={this.handleSubmit}>\n            <Form.Item>\n              {getFieldDecorator(\"title\", {\n                rules: [{ required: true, message: \"Please input title\" }]\n              })(<Input placeholder=\"Title\" />)}\n            </Form.Item>\n            {descForm}\n\n            <Form.Item>\n              <Row gutter={[0, 3]}>\n                <Col span={16}></Col>\n                <Col span={4} style={{ marginRight: \"5\" }}>\n                  <Button\n                    type=\"primary\"\n                    onClick={() => this.setState({ visible: false })}\n                  >\n                    Cancel\n                  </Button>\n                </Col>\n                <Col span={4}>\n                  <Button type=\"primary\" htmlType=\"submit\">\n                    Add\n                  </Button>\n                </Col>\n              </Row>\n            </Form.Item>\n          </Form>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    boardData: state.board.data\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addNewList: listTitle => dispatch(actions.addNewList(listTitle)),\n    addNewCard: (cardTitle, cardDes, listId)  => dispatch(actions.addNewCard(cardTitle, cardDes, listId))\n  };\n};\n\nNewListOrCard.propTypes = {};\nconst WrappedNewListOrCard = Form.create()(NewListOrCard);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(WrappedNewListOrCard);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport * as actions from \"../../store/actions\";\nimport { Popover } from \"antd\";\n\nimport NewListOrCard from \"../NewListOrCard/NewListOrCard\";\nimport \"./MyBoardView.scss\";\n\nconst reorderArray = (list, startIndex, endIndex) => {\n  const futureArray = Array.from(list);\n  const [removed] = futureArray.splice(startIndex, 1);\n  futureArray.splice(endIndex, 0, removed);\n\n  return futureArray;\n};\n\nconst grid = 10;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n\n  background: isDragging ? \"lightgreen\" : \"white\",\n\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"green\" : \"lightgreen\",\n  padding: grid,\n\n  display: \"flex\",\n\n  overflow: \"auto\"\n});\n\nconst getCildListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"green\" : \"lightgrey\",\n  padding: grid,\n  width: 200,\n  minHeight: 200,\n  border: \"0.5px solid\",\n  wordWrap: \"break-word\"\n});\n\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\n\nclass MyBoardView extends Component {\n  state = {};\n\n  getCardsArrayOfAList = id =>\n    this.props.boardData.find(element => element.id === id);\n\n  onDragListEnd = result => {\n    window.console.log(result, \"ada\");\n    const { source, destination } = result;\n\n    if (!destination) return;\n\n    if (source.droppableId === destination.droppableId) {\n      const items = reorderArray(\n        this.props.boardData,\n        source.index,\n        destination.index\n      );\n      this.props.reorderCurrList(items);\n    } \n  };\n\n  onDragEndHandler = result => {\n    window.console.log(result, \"arrr\");\n    const { destination, type } = result;\n    if (!destination) {\n      return;\n    }\n    if (type === \"CARD\") {\n      this.onCardDragEnd(result);\n    } else if (type === \"LIST\") {\n      this.onDragListEnd(result);\n    }\n  };\n\n  onCardDragEnd = result => {\n    const { source, destination } = result;\n    window.console.log(result);\n\n    // dropped outside context area\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      window.console.log(this.getCardsArrayOfAList(source.droppableId));\n      let targetList = this.getCardsArrayOfAList(source.droppableId);\n      const cardsArray = reorderArray(\n        this.getCardsArrayOfAList(source.droppableId)\n          ? this.getCardsArrayOfAList(source.droppableId).cards\n          : [],\n        source.index,\n        destination.index\n      );\n      let reorderedList = { ...targetList, cards: cardsArray };\n\n      this.props.reorderCurrList(\n        this.props.boardData.map(item =>\n          item.id === source.droppableId ? reorderedList : item\n        )\n      );\n    } else {\n      let targetList = this.getCardsArrayOfAList(source.droppableId);\n      let destinationList = this.getCardsArrayOfAList(destination.droppableId);\n      const newResult = move(\n        targetList.cards,\n        destinationList.cards,\n        source,\n        destination\n      );\n      let reorderedList1 = {\n        ...targetList,\n        cards: newResult[`${source.droppableId}`]\n      };\n      let reorderedList2 = {\n        ...destinationList,\n        cards: newResult[`${destination.droppableId}`]\n      };\n\n      this.props.reorderCurrList(\n        this.props.boardData.map(item => {\n          if (item.id === source.droppableId) return reorderedList1;\n          if (item.id === destination.droppableId) return reorderedList2;\n          return item;\n        })\n      );\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <DragDropContext onDragEnd={this.onDragEndHandler}>\n          <Droppable droppableId=\"droppable\" direction=\"horizontal\" type=\"LIST\">\n            {(provided, snapshot) => (\n              <div\n                ref={provided.innerRef}\n                style={getListStyle(snapshot.isDraggingOver)}\n              >\n                {this.props.boardData.map((item, index) => (\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\n                    {(provided, snapshot) => (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={getItemStyle(\n                          snapshot.isDragging,\n                          provided.draggableProps.style\n                        )}\n                      >\n                        {/* <DragDropContext onDragEnd={this.onCardDragEnd}> */}\n                        <Droppable droppableId={item.id} type=\"CARD\">\n                          {(childProvided, childSnapshot) => (\n                            <React.Fragment>\n                              <div\n                                ref={childProvided.innerRef}\n                                style={getCildListStyle(\n                                  childSnapshot.isDraggingOver\n                                )}\n                              >\n                                <span>\n                                  <center>{item.listTilte}</center>\n                                </span>\n                                {item.cards.map((childItem, childIndex) => (\n                                  <Draggable\n                                    key={childItem.id}\n                                    draggableId={childItem.id}\n                                    index={childIndex}\n                                  >\n                                    {(childProvided, childSnapshot) => (\n                                      <Popover\n                                        content={childItem.cardDes}\n                                        title={childItem.cardTitle}\n                                        trigger=\"click\"\n                                      >\n                                        <div\n                                          ref={childProvided.innerRef}\n                                          {...childProvided.draggableProps}\n                                          {...childProvided.dragHandleProps}\n                                          style={getItemStyle(\n                                            childSnapshot.isDragging,\n                                            childProvided.draggableProps.style\n                                          )}\n                                        >\n                                          <span>\n                                            <center>\n                                              {childItem.cardTitle}\n                                            </center>\n                                          </span>\n                                        </div>\n                                      </Popover>\n                                    )}\n                                  </Draggable>\n                                ))}\n                                {provided.placeholder}\n                              </div>\n                              <NewListOrCard\n                                itemType=\"Card\"\n                                listId={item.id}\n                              ></NewListOrCard>\n                            </React.Fragment>\n                          )}\n                        </Droppable>\n                        {/* </DragDropContext> */}\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n                <NewListOrCard itemType=\"List\"></NewListOrCard>\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    boardData: state.board.data\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    reorderCurrList: boardData => dispatch(actions.reorderCurrList(boardData))\n  };\n};\n\nMyBoardView.propTypes = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyBoardView);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Menu, Icon } from \"antd\";\nimport * as actions from \"../../../store/actions\";\n\nconst SubMenu = Menu.SubMenu;\n\nclass HorizontalPane extends React.Component {\n\n\tstate = {\n\t\tcurrent: \"list\"\n\t}\n\thandleClick = e => {\n\t\tthis.setState({\n\t\t\tcurrent: e.key\n\t\t});\n\t};\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Menu\n\t\t\t\t\t\n\t\t\t\t\ttheme=\"dark\"\n\t\t\t\t\tonClick={this.handleClick}\n\t\t\t\t\tselectedKeys={[this.state.current]}\n\t\t\t\t\tmode=\"horizontal\"\n\t\t\t\t\n\t\t\t\t>\n\t\t\t\t\t\n\n\t\t\t\t\t<SubMenu title={<span><Icon type=\"book\" />Task Mirror</span>} >\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t</SubMenu>\n\t\t\t\t\t<SubMenu title={<span onClick={() => this.props.clearBoardData()}><Icon type=\"delete\" />Clear Board</span>} >\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t</SubMenu>\n\n\n\n\t\t\t\t</Menu>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = state => {\n\treturn {\n\t  boardData: state.board.data\n\t};\n  };\n  \n  const mapDispatchToProps = dispatch => {\n\treturn {\n\t  clearBoardData: () => dispatch(actions.clearBoardData())\n\t};\n  };\n  \n  HorizontalPane.propTypes = {};\n  \n  export default connect(mapStateToProps, mapDispatchToProps)(HorizontalPane);\n  \n","import React, { Component } from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport { Layout } from \"antd\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport MyBoardView from \"../Board/MyBoardView\";\n\nimport HorizontalPane from \"../../components/TaskMirror/HorizontalPane/HorizontalPane\";\n\nimport \"./MainComponent.scss\";\n\nconst { Header, Content, Footer, Sider } = Layout;\n\nclass MainComponent extends Component {\n  render() {\n    if (true) {\n      return this.renderWhenLoggedIn();\n    }\n  }\n\n  renderWhenLoggedIn() {\n    return (\n      <React.Fragment>\n        <Layout>\n          <HorizontalPane />\n\n          <Layout>\n            <Content style={{ backgroundColor: \"lightgreen\", height: \"600px\" }}>\n              <Switch>\n                <Redirect exact from=\"/\" to=\"/board/\" />\n                <Redirect exact from=\"/login\" to=\"/board/\" />\n\n                <Route path=\"/board/\" exact component={MyBoardView} />\n              </Switch>\n            </Content>\n          </Layout>\n        </Layout>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {};\n};\n\nMainComponent.propTypes = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainComponent);\n","import React from 'react';\nimport  './Backdrop.scss';\nimport PropTypes from 'prop-types';\n\n\nconst backdrop = (props) =>{\n  return(\n  props.show ? <div styleName=\"backdrop\" ></div> : null\n  );\n}\n\n\nbackdrop.propTypes = {\n    show: PropTypes.bool,\n\n}\n\n\nexport default backdrop;","import  React from 'react';\nimport BackDrop from '../Backdrop/Backdrop'\nimport { Spin} from 'antd';\nimport './Spinner.scss'\n//const antIcon = <Icon type=\"loading\" style={{ color: 'red' }} spin />;\nconst spinner = ()  =>(\n        <div>\n            <BackDrop show={true}/>\n            <div styleName=\"spinner\"><Spin  tip = \"Loading...\" size = \"large\" /></div>\n        </div>\n  );\n\n\nexport default spinner;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { message, notification } from \"antd\";\nimport \"./App.scss\";\nimport MainComponent from \"./containers/MainComponent/MainComponent\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport Spinner from \"./components/UI/Spinner/Spinner\";\nimport \"../node_modules/antd/dist/antd.css?raw\";\nimport \"./App.scss\";\n\nclass App extends Component {\n\tcomponentDidUpdate(prevProps) {\n\t\tif (this.props.successMessage && this.props.successMessage !== prevProps.successMessage) {\n\t\t\tnotification[\"success\"]({\n\t\t\t\tmessage: this.props.successMessage\n\t\t\t});\n\t\t}\n\t\tif (this.props.error && this.props.error !== prevProps.error) {\n\t\t\tif (this.props.status === 403) {\n\t\t\t\twindow.location.href = \"/board/\";\n\t\t\t\twindow.localStorage.clear();\n\t\t\t} else {\n\t\t\t\tlet messageDict = null;\n\t\t\t\ttry {\n\t\t\t\t\tmessageDict = JSON.parse(this.props.error_message);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tmessageDict = null;\n\t\t\t\t}\n\t\t\t\tmessageDict\n\t\t\t\t\t? Object.keys(messageDict).map(key => message.error(`${key} : ${messageDict[key]}`))\n\t\t\t\t\t: message.error(\"Something Wrong\");\n\t\t\t}\n\t\t}\n\t}\n\trender() {\n\t\tlet spinner = null;\n\n\t\tif (this.props.loading || this.props.loadingRequestCount > 0) {\n\t\t\tspinner = <Spinner />;\n\t\t}\n\t\treturn (\n\t\t\t<div styleName=\"app\">\n\t\t\t\t<BrowserRouter>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<MainComponent />\n\t\t\t\t\t\t{spinner}\n\t\t\t\t\t</div>\n\t\t\t\t</BrowserRouter>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tloading: state.global.loading,\n\t\tloadingRequestCount: state.global.loadingRequestCount,\n\t\terror: state.global.error,\n\t\terror_message: state.global.errorMessage,\n\t\tsuccessMessage: state.global.successMessage,\n\t\tstatus: state.global.statusCode\n\t};\n};\n\nApp.propTypes = {\n\tloading: PropTypes.bool,\n\terror: PropTypes.bool,\n\terror_message: PropTypes.string,\n\tloadingRequestCount: PropTypes.number,\n\tstatus: PropTypes.number,\n\tsuccessMessage: PropTypes.string\n};\n\n/*export default withRouter(connect(mapStateToProps)(App));*/\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport { combineReducers } from \"redux\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport commonReducer from \"./store/reducers/commonReducer\";\n\nimport boardReducer from \"./store/reducers/boardReducers\";\n\n\nimport { createBrowserHistory } from 'history'\n\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from './serviceWorker';\nimport axios from \"axios\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst history = createBrowserHistory();\n\nconst store = createStore(\n  combineReducers({\n \n    global: commonReducer,\n\t\tboard: boardReducer,\n\t\n\n  }),\n  composeEnhancers(applyMiddleware(thunk))\n);\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App history={history} />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}